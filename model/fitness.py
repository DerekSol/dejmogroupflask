""" database dependencies to support sqliteDB examples """
from random import randrange
from datetime import date
import os, base64
import json

from __init__ import app, db
from sqlalchemy.exc import IntegrityError
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin

''' Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along '''

# Define the Post class to manage actions in 'posts' table,  with a relationship to 'users' table
class fitness(db.Model):
    __tablename__ = 'fitness_users'

    # Define the Notes schema
    contact_id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(255), unique=False, nullable=False)
    last_name = db.Column(db.String(255), unique=False, nullable=False)
    email = db.Column(db.String(255), unique=False, nullable=False)
    phone = db.Column(db.Integer, primary_key=True)
    calories = db.Column(db.Integer, primary_key=True)
    carbs = db.Column(db.Integer, primary_key=True)
    sugar = db.Column(db.Integer, primary_key=True)
    fat = db.Column(db.Integer, primary_key=True)

    # Define a relationship in Notes Schema to userID who originates the note, many-to-one (many notes to one user)
    # Constructor of a Notes object, initializes of instance variables within object
    def __init__(self, first="Martin", last="Nguyen", email="martinsupercell06@gmail.com", phone=8583567673, calories=2500, carbs=75, sugar=20, fat=20):
        self.first_name = first
        self.last_name = last
        self.email = email
        self.phone = phone
        self.calories = calories
        self.carbs = carbs
        self.sugars = sugar
        self.fat = fat

    # Returns a string representation of the Notes object, similar to java toString()
    # returns string
    def __repr__(self):
        return "Notes(" + str(self.id) + "," + self.note + "," + str(self.userID) + ")"

    # CRUD create, adds a new record to the Notes table
    # returns the object added or None in case of an error
    def create(self):
        try:
            # creates a Notes object from Notes(db.Model) class, passes initializers
            db.session.add(self)  # add prepares to persist person object to Notes table
            db.session.commit()  # SqlAlchemy "unit of work pattern" requires a manual commit
            return self
        except IntegrityError:
            db.session.remove()
            return None

    # CRUD read, returns dictionary representation of Notes object
    # returns dictionary
    def read(self):
        # encode image
        path = app.config['UPLOAD_FOLDER']
        file = os.path.join(path, self.image)
        file_text = open(file, 'rb')
        file_read = file_text.read()
        file_encode = base64.encodebytes(file_read)
        
        return {
            "id": self.id,
            "userID": self.userID,
            "note": self.note,
            "image": self.image,
            "base64": str(file_encode)
        }


# Define the User class to manage actions in the 'users' table
# -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy
# -- a.) db.Model is like an inner layer of the onion in ORM
# -- b.) User represents data we want to store, something that is built on db.Model
# -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL

"""Database Creation and Testing """


# Builds working data for testing
def initUsers():
    print("INIT USERS")
    """Create database and tables"""
    db.create_all()
    """Tester data for table"""
    u1 = fitness(name='Thomas Edison', uid='toby', password='123toby', dob=date(1847, 2, 11))
    u2 = fitness(name='Nicholas Tesla', uid='niko', password='123niko')
    u3 = fitness(name='Alexander Graham Bell', uid='lex', password='123lex')
    u4 = fitness(name='Eli Whitney', uid='whit', password='123whit')
    u5 = fitness(name='John Mortensen', uid='jm1021', dob=date(1959, 10, 21))

    users = [u1, u2, u3, u4, u5]

    """Builds sample user/note(s) data"""

    for user in users:
        try:
            '''add a few 1 to 4 notes per user'''
            for num in range(randrange(1, 4)):
                note = "#### " + user.name + " note " + str(num) + ". \n Generated by test data."
                user.posts.append(Post(id=user.id, note=note, image='ncs_logo.png'))
            '''add user/post data to table'''
            user.create()
        except IntegrityError:
            '''fails with bad or duplicate data'''
            db.session.remove()
            print(f"Records exist, duplicate email, or error: {user.uid}")